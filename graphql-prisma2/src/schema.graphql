type Query{
    me : User!
    myPosts(query : String,first : Int, skip : Int, after : String) : [Post!]!
    post(id : ID!) : Post!
    users(query : String, first : Int, skip : Int, after : String) : [User!]!
    posts(query : String, first : Int, skip : Int, after : String) : [Post!]!
    comments(first : Int, skip : Int, after : String) : [Comment!]!
}

type Mutation {

    loginUser(data : LoginUserInput!) : AuthPayload!

    createUser( data : CreateUserInput ) : AuthPayload!
    deleteUser : User!
    updateUser( data : UpdateUserInput!) : User!

    createPost( data : CreatePostInput ) : Post!
    deletePost( id : ID! ) : Post!
    updatePost( id : ID!, data : UpdatePostInput!) : Post!

    createComment( data : CreateCommentInput ) : Comment!
    deleteComment( id : ID!) : Comment!
    updateComment( id : ID!, data : UpdateCommentInput!) : Comment!
} 


type Subscription{
    comment(postId : ID!) : CommentSubscriptionPayload!
    post : PostSubscriptionPayload!
    myPosts : PostSubscriptionPayload!
}

input LoginUserInput{
    email : String!
    password : String!
}

type AuthPayload{
    token : String!
    user : User!
}

##input type must only include scalar type and cannot have any object or complex type.
input CreateUserInput{
    name : String!
    email : String!
    password : String!
}

input UpdateUserInput{
    name : String
    email : String
    password : String
}

input CreatePostInput{
    title : String!
    body : String!
    published : Boolean!
}

input UpdatePostInput{
    title : String
    body : String
    published : Boolean
}

input CreateCommentInput{
    text : String!
    post : ID!
}

input UpdateCommentInput{
    text : String
}

type User{
    id : ID!
    name : String!
    age : Int!
    email : String
    password : String!
    posts : [Post!]!
    comments : [Comment!]!
    updatedAt : String!
    createdAt : String!
}

type Post{
    id : ID!
    title : String!
    body : String!
    published : Boolean!
    author : User!
    comments : [Comment!]!
    updatedAt : String!
    createdAt : String!
}

type Comment{
    id : ID!
    text : String!
    author : User!
    post : Post!
    updatedAt : String!
    createdAt : String!
}

enum MutationType{
    CREATED
    UPDATED
    DELETED
}

type PostSubscriptionPayload{
    mutation : MutationType!
    node : Post
}

type CommentSubscriptionPayload{
    mutation : MutationType!
    node : Comment
}